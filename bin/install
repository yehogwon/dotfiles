#!/bin/bash

DF_INST_ROOT="$HOME/.dotfiles_bin"
if [ ! -d "$DF_INST_ROOT" ]; then
    mkdir -p "$DF_INST_ROOT"
fi

TMUX_INST_PATH="$DF_INST_ROOT/tmux"
NVIM_INST_PATH="$DF_INST_ROOT/nvim"

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BOLD=$(tput bold)
RESET=$(tput sgr0)

function print() {
    local message="$*"
    printf "%s\n" "${BOLD}${RED}${message}${RESET}"
}

function print_red() {
    local message="$*"
    printf "%s\n" "${BOLD}${RED}${message}${RESET}"
}

function print_yellow() {
    local message="$*"
    printf "%s\n" "${BOLD}${YELLOW}${message}${RESET}"
}

function print_green() {
    local message="$*"
    printf "%s\n" "${BOLD}${GREEN}${message}${RESET}"
}

function is_mac() {
    if [ "$(uname)" == "Darwin" ]; then
        return 0
    fi
    return 1
}

function is_linux() {
    if [ "$(uname)" == "Linux" ]; then
        return 0
    fi
    return 1
}

function neovim() {
    if [ -d "$NVIM_INST_PATH" ]; then
        print_red "$NVIM_INST_PATH already exists"
        exit 1
    fi

    if [ "$(uname)" == "Darwin" ]; then
        if [ "$(uname -m)" == "arm64" ]; then
            suffix="macos-arm64"
        else
            suffix="macos-x86_64"
        fi
    elif [ "$(uname)" == "Linux" ]; then
        if [ "$(uname -m)" == "arm64" ]; then
            suffix="linux-arm64"
        else
            suffix="linux-x86_64"
        fi
    else
        print_red "Unsupported platform: $(uname) :: $(uname -m)"
        exit 1
    fi

    _output_tmp="/tmp/.nvim.tar.gz.tmp"
    curl -L "https://github.com/neovim/neovim/releases/download/v0.11.0/nvim-$suffix.tar.gz" > $_output_tmp
    tar -C /tmp/ -xzf $_output_tmp
    rm $_output_tmp
    mv /tmp/nvim-$suffix $NVIM_INST_PATH

    print_green "Installed neovim. Add the following to your \$PATH:"
    print "$NVIM_INST_PATH/bin"
    print "alias vim='nvim'"
    print "alias vi='nvim'"
    print_yellow "Note: This dotsync will do this on behalf of you!"

    return 0
}

function git() {
    print_red "Installing git is not supported yet."
    return 1
}

function tmux() {
    if is_mac; then
        print_red "Unsupported platform: $(uname) :: $(uname -m)"
        return 1
    fi

    if [ -d "$TMUX_INST_PATH" ]; then
        print_red "$TMUX_INST_PATH already exists"
        exit 1
    fi

    _output_tmp="/tmp/.tmux.appimage.tmp"

    curl -s https://api.github.com/repos/nelsonenzo/tmux-appimage/releases/latest \
        | grep "browser_download_url.*appimage" \
        | cut -d : -f 2,3 \
        | tr -d \" \
        | wget -O $_output_tmp -qi - \
        && chmod +x $_output_tmp

    mkdir -p $TMUX_INST_PATH/bin
    mv $_output_tmp $TMUX_INST_PATH/bin/tmux

    print_green "Installed tmux. Add the following to your \$PATH:"
    print "$TMUX_INST_PATH/bin"
    print_green "Note: This dotsync will do this on behalf of you!"
    
    return 0
}

function uninstall() {
    for package in "$@"; do
        package_dir="none"
        case $package in
            neovim) package_dir="$NVIM_INST_PATH" ;;
            tmux) package_dir="$TMUX_INST_PATH" ;;
        esac

        if [ "$package_dir" == "none" ]; then
            print_red "Unknown package: $package"
            continue
        fi

        print_yellow "Are you sure to remove $package?"
        print "This will run the following command:"
        print_red " \$ rm -drf $package_dir"
        read -p "Type 'yes' to confirm: " confirmation
        if [ "$confirmation" == "yes" ]; then
            rm -rf "$package_dir"
            print_green "Removed $package successfully."
        else
            print_yellow "Skipped removal of $package."
        fi
    done
}

if [ "$1" == "uninstall" ]; then
    shift
    uninstall $@
else
    packages=$@

    unknown_packages=()
    for package in $packages; do
        if ! declare -f $package > /dev/null; then
            unknown_packages+=($package)
        fi
    done

    if [ ${#unknown_packages[@]} -gt 0 ]; then
        print_red "Unknown packages: ${unknown_packages[@]}"
        exit 1
    fi

    for package in $packages; do
        case $package in
            neovim) neovim ;;
            git) git ;;
            tmux) tmux ;;
        esac
        if [ $? -ne 0 ]; then
            print_red "Failed to install $package"
        fi
        print_yellow "Installed $package"
    done
fi
