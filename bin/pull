#! /bin/bash

if [ -n "$ZSH_VERSION" ]; then
    # zsh specific
    if [[ $ZSH_EVAL_CONTEXT =~ :file$ ]]; then
        sourced=1
    else
        sourced=0
    fi
elif [ -n "$BASH_VERSION" ]; then
    # bash specific
    if [[ "${BASH_SOURCE[0]}" != "$0" ]]; then
        sourced=1
    else
        sourced=0
    fi
else
    echo "\e[1;31mThis shell($SHELL) is not supported.\e[0m"
    exit 1
fi

if [ $sourced -eq 0 ]; then
    echo -e "\e[1;31mError: This script must be sourced, not executed.\e[0m"
    echo -e "\e[1;31mUsage: source $0\e[0m"
    exit 1
fi

CWD=$(pwd)

SCRIPT_PATH="$(realpath "${BASH_SOURCE[0]:-$0}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
DOTFILES_DIR="$(realpath "$SCRIPT_DIR/..")" # does not end with a slash

# TODO: support unlink
sync_modules=$@

if [ -z "$sync_modules" ]; then
    sync_modules="all"
fi

if [[ "$sync_modules" == *"none"* ]]; then
    sync_modules=""
fi

function source_exists() {
    file_path=$1
    if [ -f "$file_path" ]; then
        source "$file_path" 1> /dev/null
    fi
}

function bind_exists() {
    bind_name=$1
    if [ -f "$bind_name" ]; then
        bind -f "$bind_name" 1> /dev/null
    fi
}

function tmux_source_exists() {
    tmux_source=$1
    if [ -f "$tmux_source" ]; then
        tmux source "$tmux_source" 1> /dev/null
    fi
}

function load_submodules() {
    echo -e "\e[1;31m[Working] submodules\e[0m"
    git submodule update --remote
}

function load_fzf() {
    # This should be done prior to bash and zsh
    echo -e "\e[1;31m[Working] fzf\e[0m"
    rm -drf "$HOME/.fzf"
    ln -s "$DOTFILES_DIR/modules/fzf" "$HOME/.fzf"

    "$DOTFILES_DIR/modules/fzf/install" --bin # This does nothing if fzf is already installed (also sanity-checks binary)
}

function load_bash() {
    echo -e "\e[1;31m[Working] bash\e[0m"
    rm -f "$HOME/.bashrc"
    ln -s "$DOTFILES_DIR/bash/bashrc" "$HOME/.bashrc"

    rm -f "$HOME/.inputrc"
    ln -s "$DOTFILES_DIR/bash/inputrc" "$HOME/.inputrc"
    
    bind_exists $HOME/.inputrc
    if [ -n "$BASH_VERSION" ]; then
        source_exists $HOME/.bashrc
    fi
}

function load_zsh() {
    echo -e "\e[1;31m[Working] zsh\e[0m"
    rm -f "$HOME/.zshrc"
    ln -s "$DOTFILES_DIR/zsh/zshrc" "$HOME/.zshrc"

    rm -f "$HOME/.zlogin"
    ln -s "$DOTFILES_DIR/zsh/zlogin" "$HOME/.zlogin"

    rm -f "$HOME/.zlogout"
    ln -s "$DOTFILES_DIR/zsh/zlogout" "$HOME/.zlogout"

    rm -f "$HOME/.zprofile"
    ln -s "$DOTFILES_DIR/zsh/zprofile" "$HOME/.zprofile"

    rm -f "$HOME/.zshenv"
    ln -s "$DOTFILES_DIR/zsh/zshenv" "$HOME/.zshenv"

    if [ -n "$ZSH_VERSION" ]; then
        source_exists $HOME/.zshrc
        source_exists $HOME/.zprofile
        source_exists $HOME/.zshenv
    fi
}

function load_tmux() {
    rm -drf "$HOME/.config/tmux-powerline"
    ln -s "$DOTFILES_DIR/tmux/powerline/" "$HOME/.config/tmux-powerline"
    
    rm -f "$HOME/.tmux/tmux.keybinding.conf"
    ln -s "$DOTFILES_DIR/tmux/tmux.keybinding.conf" "$HOME/.tmux/tmux.keybinding.conf"

    rm -f "$HOME/.tmux.conf"
    ln -s "$DOTFILES_DIR/tmux/tmux.conf" "$HOME/.tmux.conf"

    rm -drf "$HOME/.tmux/scripts"
    ln -s "$DOTFILES_DIR/tmux/scripts" "$HOME/.tmux/scripts"

    # tpm
    rm -drf "$HOME/.tmux/plugins/tpm"
    if [ ! -d "$HOME/.tmux/plugins" ]; then
        mkdir -p "$HOME/.tmux/plugins"
    fi
    ln -s "$DOTFILES_DIR/tmux/tpm" "$HOME/.tmux/plugins/tpm"

    tmux_source_exists $HOME/.tmux.conf
}

function load_vim() {
    rm -f "$HOME/.vimrc"
    ln -s "$DOTFILES_DIR/vim/vimrc" "$HOME/.vimrc"
}

function load_git() {
    echo -e "\e[1;31m[Working] git\e[0m"
    rm -f "$HOME/.gitconfig"
    ln -s "$DOTFILES_DIR/git/gitconfig" "$HOME/.gitconfig"
}

function load_conda() {
    echo -e "\e[1;31m[Working] conda\e[0m"
    rm -f "$HOME/.conda_init.sh"
    ln -s "$DOTFILES_DIR/scripts/conda_init.sh" "$HOME/.conda_init.sh"
}

function load_dotfiles()
{
    load_submodules

    for module in $sync_modules; do
        case $module in
            "all")
                load_fzf
                load_conda
                load_bash
                load_zsh
                load_tmux
                load_vim
                load_git
                break
                ;;
            "fzf") load_fzf ;;
            "conda") load_conda ;;
            "bash") load_bash ;;
            "zsh") load_zsh ;;
            "tmux") load_tmux ;;
            "vim") load_vim ;;
            "git") load_git ;;
            *) echo -e "\e[1;31mUnknown module: $module\e[0m" ;;
        esac
    done
}

echo -e "\e[1;31mDownloading dotfiles from GitHub...\e[0m"
cd "$DOTFILES_DIR"
if git pull > /tmp/git_pull_output 2>&1; then
    if grep -q "Already up to date" /tmp/git_pull_output; then
        echo -e "\e[1;31mDotfiles already up to date.\e[0m"
    else
        echo -e "\e[1;31mDotfiles downloaded successfully.\e[0m"
    fi

    echo -e "\e[1;31mLinking & sourcing dotfiles...\e[0m"
    load_dotfiles
    echo -e "\e[1;31mDotfiles linked & sourced successfully.\e[0m"
else
    echo -e "\e[1;31mFailed to download dotfiles.\nRefer to the following output:\e[0m"
    cat /tmp/git_pull_output
fi

cd "$CWD"
