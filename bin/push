#! /bin/bash

CWD=$(pwd)

SCRIPT_PATH="$(realpath "${BASH_SOURCE[0]:-$0}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
DOTFILES_DIR="$(realpath "$SCRIPT_DIR/..")" # does not end with a slash

TOOLS_PATH="$(realpath "$DOTFILES_DIR/scripts/tools.sh")"
if [ -f "$TOOLS_PATH" ]; then
    source "$TOOLS_PATH"
else
    echo "Error: $TOOLS_PATH does not exist."
    return 1
fi

print_red "Updating submodules..."
cd "$DOTFILES_DIR"
git submodule update --remote

function get_commit_message() {
    message=$(date +"%Y.%m.%d-%H:%M:%S")
    
    if [ -z "$LLM_AC_API_KEY" ]; then
        >&2 print_green "You can set LLM_AC_API_KEY to use commit message generator."
    fi

    >&2 print_red "Generating commit message..."
    _gen_message="$($DOTFILES_DIR/scripts/llm_auto_commit "$DOTFILES_DIR")"
    
    if [ $? -eq 0 ]; then
        >&2 print_red "Commit message generated successfully."
        message="$_gen_message"
    else
        >&2 print_red "Failed to generate commit message."
        >&2 echo $_gen_message
    fi

    echo "$message ðŸš€"
}

print_red "Adding dotfiles to GitHub and committing..."
if git add .; then
    print_red "Dotfiles added successfully."
    _commit_message=$(get_commit_message)
    if git commit -m "$_commit_message"; then
        print_red "Dotfiles committed successfully."
        if git push origin main; then
            print_red "Dotfiles pushed successfully."
        else
            print_red "Failed to push dotfiles."
        fi
    else
        print_red "Failed to commit dotfiles."
    fi
else
    print_red "Failed to add dotfiles."
fi

cd $CWD;
